package ru.mephi.vulnerabilitysystem.controllers;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import ru.mephi.vulnerabilitysystem.models.ProjectVulnerability;
import ru.mephi.vulnerabilitysystem.models.Workaround;
import ru.mephi.vulnerabilitysystem.repositories.ProjectRepository;
import ru.mephi.vulnerabilitysystem.repositories.ProjectVulnerabilityRepository;
import ru.mephi.vulnerabilitysystem.repositories.VulnerabilityTypeRepository;
import ru.mephi.vulnerabilitysystem.services.XlsxParserService;

import javax.validation.Valid;

@Controller
@RequestMapping("/project-vulnerabilities")
public class ProjectVulnerabilityController {
    final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    final XlsxParserService xlsxParserService;

    final ProjectRepository projectRepository;

    final VulnerabilityTypeRepository vulnerabilityTypeRepository;

    public ProjectVulnerabilityController(ProjectVulnerabilityRepository projectVulnerabilityRepository, XlsxParserService xlsxParserService, ProjectRepository projectRepository, VulnerabilityTypeRepository vulnerabilityTypeRepository) {
        this.projectVulnerabilityRepository = projectVulnerabilityRepository;
        this.xlsxParserService = xlsxParserService;
        this.projectRepository = projectRepository;
        this.vulnerabilityTypeRepository = vulnerabilityTypeRepository;
    }

    @GetMapping("/{id}")
    public String indexForProject(Model model, @PathVariable Integer id,
                                  @PageableDefault(size = 5) Pageable pageable) {

        Page<ProjectVulnerability> thisPage = projectVulnerabilityRepository.findAllByProject_Id(pageable, id);
        int dif = thisPage.getTotalPages() - thisPage.getNumber();
        int[] newGuess;

        if (dif>=5){
            newGuess = new int[5];
        }
        else{
            newGuess = new int[dif];
        }

        for (int i = 0; i < newGuess.length; i++)
        {
            if (pageable.hasPrevious()){
                newGuess[i] = pageable.getPageNumber() - 1 + i;
            }else{
                newGuess[i] = pageable.getPageNumber() + i;
            }
        }
        //model.addAttribute("");
        model.addAttribute("project", projectRepository.getReferenceById(id));
        //model.addAttribute("projectVulnerabilities",projectVulnerabilityRepository.findAllByProject_Id(id));
        model.addAttribute("prev",pageable.hasPrevious());
        model.addAttribute("active",pageable.getPageNumber());
        model.addAttribute("nums", newGuess);
        model.addAttribute("projectVulnerabilities", thisPage);
        return "project-vulnerabilities/index";
    }

    @GetMapping("/vln/{id2}")
    public String showVulnerability(Model model, @PathVariable Integer id2) {
        model.addAttribute("vln", projectVulnerabilityRepository.findProjectVulnerabilityById(id2));
        return "project-vulnerabilities/show";
    }
    @GetMapping("/vln/{id}/edit")
    public String editVulnerability(Model model, @PathVariable Integer id){
        model.addAttribute("vln", projectVulnerabilityRepository.findProjectVulnerabilityById(id));
        model.addAttribute("types", vulnerabilityTypeRepository.findAll());

        return "project-vulnerabilities/edit";
    }

    @PatchMapping("/{id}")
    public String update(@ModelAttribute("projectVulnerability") @Valid ProjectVulnerability projectVulnerability,
                         BindingResult bindingResult,
                         @PathVariable("id") int id) {
        if (bindingResult.hasErrors()) {
            return "project-vulnerabilities/edit";
        }
        ProjectVulnerability newVulnerability = projectVulnerabilityRepository.getReferenceById(id);
        newVulnerability.setName(projectVulnerability.getName());
        newVulnerability.setVulnerability(projectVulnerability.getVulnerability());
        //newVulnerability.se
        projectVulnerabilityRepository.save(newVulnerability);
        return "redirect:/project-vulnerabilities/vln/"+id;
    }
}
