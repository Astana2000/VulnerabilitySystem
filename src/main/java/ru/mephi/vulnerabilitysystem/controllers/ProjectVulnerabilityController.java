package ru.mephi.vulnerabilitysystem.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import ru.mephi.vulnerabilitysystem.repositories.ProjectRepository;
import ru.mephi.vulnerabilitysystem.repositories.ProjectVulnerabilityRepository;
import ru.mephi.vulnerabilitysystem.services.XlsxParserService;

import java.io.IOException;

@Controller
@RequestMapping("/project-vulnerabilities")
public class ProjectVulnerabilityController {
    final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    final XlsxParserService xlsxParserService;

    final ProjectRepository projectRepository;

    public ProjectVulnerabilityController(ProjectVulnerabilityRepository projectVulnerabilityRepository, XlsxParserService xlsxParserService, ProjectRepository projectRepository) {
        this.projectVulnerabilityRepository = projectVulnerabilityRepository;
        this.xlsxParserService = xlsxParserService;
        this.projectRepository = projectRepository;
    }

    @GetMapping("/{id}")
    public String indexForProject(Model model, @PathVariable Integer id){
        model.addAttribute("project", projectRepository.getReferenceById(id));
        model.addAttribute("projectVulnerabilities",projectVulnerabilityRepository.findAllByProject_Id(id));
        return "project-vulnerabilities/index";
    }
    @GetMapping("/vln/{id2}")
    public String showVulnerability(Model model,@PathVariable Integer id2 ){
        model.addAttribute("vln", projectVulnerabilityRepository.findProjectVulnerabilityById(id2));
        return "project-vulnerabilities/show";
    }
  /*  @GetMapping("/upload")
    public String getProjectVulnerabilitiesFromExcel(Model model){//что нужно передавать
        try {
            xlsxParserService.readFromExcel("C:\\Users\\Natalia\\Desktop\\Poskeeper_master_20220310 (2).xlsx",1);
            //изменить
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return "redirect:/project-vulnerabilities";
    }*/




}
