package ru.mephi.vulnerabilitysystem.controllers;

import org.hibernate.jdbc.Work;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import ru.mephi.vulnerabilitysystem.models.ProjectWorkaround;
import ru.mephi.vulnerabilitysystem.models.Workaround;
import ru.mephi.vulnerabilitysystem.repositories.ProjectWorkaroundRepository;
import ru.mephi.vulnerabilitysystem.repositories.WorkaroundRepository;

import javax.validation.Valid;
import java.util.List;

@Controller
@RequestMapping("/project-workarounds")
public class ProjectWorkaroundController {
    @Autowired
    private ProjectWorkaroundRepository projectWorkaroundRepository;
    @Autowired
    private WorkaroundRepository workaroundRepository;

    @GetMapping()
    public String index(Model model) {
        //вытаскивать не все,а только к конкретному проекту. и делать решение уязвимости без самой уязвимости
        //тоже как-то странно
        model.addAttribute("projectWorkarounds", projectWorkaroundRepository.findAll());
        return "project-workarounds/index";
    }
    @GetMapping("/new")
    public String newProject(@ModelAttribute("projectWorkaround") ProjectWorkaround projectWorkaround, Model model) {
        model.addAttribute("workarounds", workaroundRepository.findAll());
        return "project-workarounds/new";
    }
    @PostMapping()
    public String create(@ModelAttribute("projectWorkaround") @Valid ProjectWorkaround projectWorkaround,
                         BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "project-workarounds/new";
        }
        projectWorkaroundRepository.save(projectWorkaround);
        return "redirect:/project-workarounds";
    }

    @GetMapping("/{id}/edit")
    public String edit(Model model, @PathVariable("id") int id) {
        ProjectWorkaround thisProjectWorkaround = projectWorkaroundRepository.getReferenceById(id);
        model.addAttribute("projectWorkaround", thisProjectWorkaround);
        List<Workaround> allWorkarounds = workaroundRepository.findAll();
        allWorkarounds.remove(thisProjectWorkaround.getWorkaround());
        model.addAttribute("workarounds", allWorkarounds);
        return "project-workarounds/edit";
    }

    @PatchMapping("/{id}")
    public String update(@ModelAttribute("projectWorkaround") @Valid ProjectWorkaround projectWorkaround,
                         BindingResult bindingResult,
                         @PathVariable("id") int id) {
        if (bindingResult.hasErrors()) {
            return "project-workarounds/edit";
        }
        ProjectWorkaround newProjectWorkaround = projectWorkaroundRepository.getReferenceById(id);
        newProjectWorkaround.setWorkaround(projectWorkaround.getWorkaround());
        newProjectWorkaround.setDescription(projectWorkaround.getDescription());
        projectWorkaroundRepository.save(newProjectWorkaround);
        return "redirect:/project-workarounds";
    }

    @DeleteMapping("/{id}")
    public String delete(@PathVariable("id") int id) {
        projectWorkaroundRepository.deleteById(id);
        return "redirect:/project-workarounds";
    }

}
