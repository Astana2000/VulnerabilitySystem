package ru.mephi.vulnerabilitysystem.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import ru.mephi.vulnerabilitysystem.models.VulnerabilityType;
import ru.mephi.vulnerabilitysystem.models.Workaround;
import ru.mephi.vulnerabilitysystem.repositories.VulnerabilityRepository;
import ru.mephi.vulnerabilitysystem.repositories.VulnerabilityTypeRepository;
import ru.mephi.vulnerabilitysystem.repositories.WorkaroundRepository;

import javax.validation.Valid;
import java.util.List;

@Controller
@RequestMapping("/vulnerability-types")
public class VulnerabilityTypeController {
    @Autowired
    VulnerabilityTypeRepository typeRepository;
    @Autowired
    WorkaroundRepository workaroundRepository;

    @GetMapping
    public String index(Model model){
        model.addAttribute("types",typeRepository.findAll());
        return "types/index";
    }
    @GetMapping("/new")
    public String newType(Model model,@ModelAttribute("type") VulnerabilityType type){
        model.addAttribute("workarounds", workaroundRepository.findAll());
        return "types/new";
    }
    @PostMapping()
    public String create(@ModelAttribute("type") @Valid VulnerabilityType type,
                         BindingResult bindingResult){
        if (bindingResult.hasErrors()){
            return "types/new";
        }
        typeRepository.save(type);
        return "redirect:/vulnerability-types";
    }
    @GetMapping("/{id}/edit")
    public String edit(Model model, @PathVariable("id") int id){
        model.addAttribute("type",typeRepository.getReferenceById(id));
        List<Workaround> allWorkarounds = workaroundRepository.findAll();
        allWorkarounds.remove(typeRepository.getReferenceById(id).getWorkaround());
        model.addAttribute("workarounds", allWorkarounds);
        return "types/edit";
    }
    @PatchMapping("/{id}")
    public String update(@ModelAttribute("type") @Valid VulnerabilityType type,
                         BindingResult bindingResult,
                         @PathVariable("id") int id){
        if (bindingResult.hasErrors()){
            return "vulnerability-types/edit";
        }
        VulnerabilityType newType = typeRepository.getReferenceById(id);
        newType.setName(type.getName()); //можно собрать в один метод
        newType.setDescription(type.getDescription());
        newType.setRusName(type.getRusName());
        newType.setWorkaround(type.getWorkaround());

        typeRepository.save(newType);
        return "redirect:/vulnerability-types";
    }

    @DeleteMapping("/{id}")
    public String delete(@PathVariable("id") int id){
        typeRepository.deleteById(id);
        return "redirect:/vulnerability-types";
    }
}

