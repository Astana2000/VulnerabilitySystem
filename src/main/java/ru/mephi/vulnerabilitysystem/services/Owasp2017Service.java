package ru.mephi.vulnerabilitysystem.services;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.mephi.vulnerabilitysystem.models.Vulnerability;
import ru.mephi.vulnerabilitysystem.repositories.ClassifierRepository;
import ru.mephi.vulnerabilitysystem.repositories.VulnerabilityRepository;
import java.io.IOException;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class Owasp2017Service {
    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;
    @Autowired
    private ClassifierRepository classifierRepository;

    public void getNewVulnerability(String url) {
        List<Vulnerability> owaspVulnerabilities = new ArrayList<>();
        try {
            Document doc = Jsoup.connect(url).get();
            Elements links = doc.body().getElementsByTag("a");
            Elements descriptions = doc.body().getElementsByTag("dd");

            int cnt = -1;
            for (Element link : links) {
                Pattern pattern = Pattern.compile("A[0-9]+");
                Matcher matcher = pattern.matcher(link.text());
                while (matcher.find()) {

                    if (!(cnt == -1 || cnt == 10)) {
                        Vulnerability vulnerability = new Vulnerability();
                        vulnerability.setName(link.text().replaceAll(":2017", ""));
                        vulnerability.setDescription(descriptions.get(cnt).text());
                        vulnerability.setLink(
                              "https://owasp.org/www-project-top-ten/2017/" + link.attr("href")
                        );
                        vulnerability.setCls(classifierRepository.getByName("OWASP Top 10 2017"));
                        vulnerability.setRusName(transalteIntoRussian(link.text()));
                        owaspVulnerabilities.add(vulnerability);
                    }
                    cnt++;
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        vulnerabilityRepository.saveAll(owaspVulnerabilities);
    }

    public String transalteIntoRussian(String eng) {
        return "Русский перевод";
    }

}
