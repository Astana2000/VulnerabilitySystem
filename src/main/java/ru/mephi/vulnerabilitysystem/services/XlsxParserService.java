package ru.mephi.vulnerabilitysystem.services;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.mephi.vulnerabilitysystem.models.ProjectVulnerability;
import ru.mephi.vulnerabilitysystem.models.VulnerabilityType;
import ru.mephi.vulnerabilitysystem.repositories.*;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class XlsxParserService {
    @Autowired
    ProjectVulnerabilityRepository projectVulnerabilityRepository;

    @Autowired
    VulnerabilityTypeRepository typeRepository;
    @Autowired
    VulnerabilityRepository vulnerabilityRepository;
    @Autowired
    StatusRepository statusRepository;
    @Autowired
    SeverityRepository severityRepository;
    @Autowired
    StateRepository stateRepository;

    @Autowired
    ProjectRepository projectRepository;




    public void readFromExcel(String file,int projectId) throws IOException {
        XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(file));
        XSSFSheet myExcelSheet = myExcelBook.getSheetAt(0);
        XSSFRow query;
        List<ProjectVulnerability> vulnerabilityList = new ArrayList<>();
        ArrayList<Integer> nums = new ArrayList<>(Arrays.asList(0, 1,10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 23, 24, 25));
        for (int i = 1; i < myExcelSheet.getLastRowNum(); i++) {
            query = myExcelSheet.getRow(i);
            ProjectVulnerability projectVulnerability = new ProjectVulnerability();
            projectVulnerability.setProject(projectRepository.getReferenceById(projectId));
            for (int j:nums) {
                String value = getValueFromCell(query.getCell(j));

                if (j==0){
                    if (typeRepository.findByName(value)!=null){
                        projectVulnerability.setVulnerability(typeRepository.findByName(value));
                    }else{
                        VulnerabilityType type = new VulnerabilityType();
                        type.setName(value);
                        type.getTypes().add(vulnerabilityRepository.
                                findByName(getValueFromCell(query.getCell(7))));
                        typeRepository.save(type);
                        projectVulnerability.setVulnerability(typeRepository.findByName(value));
                    }
                }
                if(j==1){
                    projectVulnerability.setQueryPath(value);
                }
                if (j==10 || j==11 || j==12|| j==13||j==14){
                    projectVulnerability.setSrc(projectVulnerability.getSrc() + value + " ");
                }
                if (j==15 || j==16 || j==17|| j==18||j==19){
                    projectVulnerability.setDest(projectVulnerability.getSrc() + value + " ");
                }
                if (j==20){
                    projectVulnerability.setState(stateRepository.findByName(value));
                }
                if (j==21){
                    projectVulnerability.setSeverity(severityRepository.findByName(value));
                }
                if (j==23){
                    projectVulnerability.setComment(value);
                }
                if (j==24){
                    projectVulnerability.setLink(value);
                }
                if (j==25){
                    projectVulnerability.setStatus(statusRepository.findByName(value));
                }

            }
            vulnerabilityList.add(projectVulnerability);
        }
        projectVulnerabilityRepository.saveAll(vulnerabilityList);
        myExcelBook.close();

    }


    public String getValueFromCell(XSSFCell cell){
        if (!(cell==null)) {
            if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                return cell.getStringCellValue();
            }
            if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                int name = (int) cell.getNumericCellValue();
                return String.valueOf(name);
            }
        } else {
            return null;
        }
        return null; //или лучше кинуть exceptioN?
    }
}
