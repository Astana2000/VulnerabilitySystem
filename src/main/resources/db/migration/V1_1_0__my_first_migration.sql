drop schema if exists vln CASCADE;
create schema vln;
--создание таблиц
create table vln.severities
(
    severity_id SERIAL primary key,
    severity_name varchar(50) not null,
    rus_name varchar(100) NOT NULL
);
create table vln.statuses
(
    status_id SERIAL primary key,
    status_name varchar(50) not null,
    rus_name varchar(100) NOT NULL
);

create table vln.states
(
    state_id SERIAL primary key,
    state_name varchar(50) not null,
    rus_name varchar(100) NOT NULL
);
create table vln.workarounds
(
    workaround_id SERIAL primary key,
    description varchar not null
);
create table vln.classifiers
(
    cls_id SERIAL primary key,
    cls_name character varying(100) not null
);
create table vln.vln_types
(
    type_id SERIAL primary key,
    type_name varchar(100) not null,
    rus_name varchar(100) NOT NULL,
    description varchar
);
create table vln.projects
(
    project_id SERIAL primary key,
    project_name varchar(100) not null,
    description varchar
);

create table vln.project_workarounds
(
    id SERIAL PRIMARY KEY,
    workaround_id integer not null,
    description integer not null,
    FOREIGN KEY (workaround_id) REFERENCES vln.workarounds (workaround_id)
);
create table vln.vulnerabilities
(
    id SERIAL PRIMARY KEY,
    name varchar(100) not null,
    rus_name varchar(100) not null,
    description varchar not null,
    link varchar,
    workaround_id integer,
    type_id integer, --вообще говоря нот нулл,но так как я не знаю всех типов,лучше пока так
    cls_id integer,
    FOREIGN KEY (workaround_id) REFERENCES vln.workarounds (workaround_id),
    FOREIGN KEY (type_id) REFERENCES vln.vln_types (type_id),
    FOREIGN KEY (cls_id) REFERENCES vln.classifiers (cls_id)
);

create table vln.project_vulnerabilities
(
    id SERIAL PRIMARY KEY,
    name varchar(50),
    query_path varchar not null,
    src varchar not null,
    dest varchar not null,
    comment varchar,
    link varchar,
    severity_id integer not null,
    status_id integer not null,
    project_id integer not null,
    vln_id integer, --вообще говоря not null, но я также не знаю всех,поэтому оставлю пока так
    workaround_id integer not null,
    state_id integer not null,
    FOREIGN KEY (workaround_id) REFERENCES vln.workarounds (workaround_id),
    FOREIGN KEY (severity_id) REFERENCES vln.severities (severity_id),
    FOREIGN KEY (status_id) REFERENCES vln.statuses (status_id),
    FOREIGN KEY (project_id) REFERENCES vln.projects (project_id),
    FOREIGN KEY (vln_id) REFERENCES vln.vulnerabilities (id),
    FOREIGN KEY (state_id) REFERENCES vln.states (state_id)
);

--предзаполнение
insert into vln.severities (severity_name, rus_name) values('High','Высокая');
insert into vln.severities (severity_name, rus_name) values('Medium','Средняя');
insert into vln.severities (severity_name, rus_name) values('Low','Низкая');

insert into vln.states (state_name, rus_name) values('To Verify','Проверить');
insert into vln.states (state_name, rus_name) values('Not exploitable','Не проверять');
insert into vln.states (state_name, rus_name) values('Confirmed','Подтверждена');
insert into vln.states (state_name, rus_name) values('Urgent','Срочная');

insert into vln.statuses ( status_name, rus_name) values ('New','Новая');
insert into vln.statuses ( status_name, rus_name) values ('Recurrent','Повторяющаяся');
insert into vln.statuses ( status_name, rus_name) values ('Completed','Завершенная');
insert into vln.statuses ( status_name, rus_name) values ('Ignored','Проигнорированная');

insert into vln.vln_types (type_name, rus_name, description)
values ('Insecure Data Storage','Небезопасное хранение данных',
        'Небезопасное хранение и непреднамеренные утечки данных');

insert into vln.vln_types (type_name, rus_name, description)
values ('Privacy Violation','Нарушение конфиденциальности',
        'Неправильное обращение с личной информацией, такой как пароли клиентов');

insert into vln.vln_types (type_name, rus_name, description)
values ('Cross Site History Manipulation','Межсайтовые манипуляции с историей (XSHM)',
        'Манипулируя историей посещений браузера, возможно обойти технологию защиты браузера ' ||
        'и вмешаться в частную жизнь пользователя');

insert into vln.vln_types (type_name, rus_name, description)
values ('SQL Injection','SQl Инъекция',
        'Уязвимость, которая возникает из-за недостаточной фильтрации вводимых пользователем данных,' ||
        ' что позволяет модифицировать запросы к базам данных.');
insert into vln.vln_types (type_name, rus_name, description)
values ('Second Order SQL Injection','SQl Инъекция второго порядка',
        'SQL-инъекция второго порядка возникает, когда предоставленные пользователем данные' ||
        ' сохраняются приложением, ' ||
        'а затем включаются в SQL-запросы небезопасным способом.');

insert into vln.vln_types (type_name, rus_name, description)
values ('Stored XSS','Межсайтовый скриптинг',
        'Вредоносный код сохраняется на сервере и загружается с него каждый раз,' ||
        ' когда пользователи запрашивают отображение той или иной страницы. ' ||
        'Чаще всего проявляются там, где пользовательский ввод не проходит фильтрацию и сохраняется на сервере');

insert into vln.vln_types (type_name, rus_name, description)
values ('Dangerous File Upload','Загрузка опасных файлов',
        'Уязвимости при загрузке файлов возникают, ' ||
        'когда веб-сервер позволяет пользователям загружать файлы в свою файловую систему ' ||
        'без достаточной проверки таких параметров, как их имя, тип, содержимое или размер');
